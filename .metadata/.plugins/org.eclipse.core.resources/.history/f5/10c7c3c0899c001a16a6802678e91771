package implementacao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import bd.BD;
import bd.BdException;
import dao.UsuarioDao;
import model.Relatorio;
import model.Usuario;

public class UsuarioDaoJDBC implements UsuarioDao {

	private Connection conn;

	public UsuarioDaoJDBC(Connection conn) {
		this.conn = conn;
	}

	@Override
	public void inserir(Usuario obj) {
		PreparedStatement st = null;
		try {
			st = conn.prepareStatement(
					"INSERT INTO usuario "
					+ "(nome, cpf, idade, Email) "
					+ "VALUES "
					+ "(?, ?, ?, ?)",
					Statement.RETURN_GENERATED_KEYS);
			
			st.setString(1, obj.getNome());
			st.setString(2, obj.getCpf());
			st.setInt(3, obj.getIdade());
			st.setString(4, obj.getEmail());
			
			int linhasAfetadas = st.executeUpdate();
			
			if (linhasAfetadas > 0) {
				ResultSet rs = st.getGeneratedKeys();
				if (rs.next()) {
					int id = rs.getInt(1);
					obj.setId(id);
				}
				BD.closeResultSet(rs);
			}
			else {
				throw new BdException("Erro inesperado! Zero linhas afetadas!");
			}
		}
		catch (SQLException e) {
			throw new BdException(e.getMessage());
		}
		finally {
			BD.closeStatement(st);
		}
		
	}

	@Override
	public void atualizar(Usuario obj) {
		PreparedStatement st = null;
		try {
			st = conn.prepareStatement(
					"UPDATE usuario "
					+ "SET nome = ?, email = ?, idade = ? "
					+ "WHERE id = ?");
			
			st.setString(1, obj.getNome());
			st.setString(2, obj.getEmail());
			st.setInt(3, obj.getIdade());
			st.setInt(4, obj.getId());
			
			st.executeUpdate();
		}
		catch (SQLException e) {
			throw new BdException(e.getMessage());
		}
		finally {
			BD.closeStatement(st);
		}

	}

	@Override
	public void deletarPorId(Integer id) {
		PreparedStatement st = null;
		try {
			st = conn.prepareStatement("DELETE FROM usuario WHERE Id = ?");
			
			st.setInt(1, id);
			
			st.executeUpdate();
		}
		catch (SQLException e) {
			throw new BdException(e.getMessage());
		}
		finally {
			BD.closeStatement(st);
		}
		
	}

	@Override
	public Usuario encontrarPorId(Integer id) {
		PreparedStatement st = null;
		ResultSet rs = null;
		try {
			st = conn.prepareStatement(
					"SELECT * FROM usuario " + 
			"WHERE id = ?");
			
			st.setInt(1, id);
			rs = st.executeQuery();
			
			if (rs.next()) {
				
				Usuario usuario = instanciaUsuario(rs);
				
				return usuario;
			}
			
			return null;
		}
		catch (SQLException e) {
			throw new BdException(e.getMessage());
		}
		finally {
			BD.closeStatement(st);
			BD.closeResultSet(rs);
		}
	}
	
	private Usuario instanciaUsuario(ResultSet rs) throws SQLException {
		
		Usuario obj = new Usuario();
		obj.setId(rs.getInt("Id"));
		obj.setNome(rs.getString("nome"));
		obj.setEmail(rs.getString("Email"));
		obj.setIdade(rs.getInt("idade"));
		obj.setCpf(rs.getString("cpf"));
		
		return obj;
	}

	private Relatorio instanciaRelatorio(ResultSet rs) {
		
		return null;
	}
	
	@Override
	public List<Relatorio> todosRelatorios(Relatorio relatorio) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Usuario> todosUsuarios() {
		PreparedStatement st = null;
		ResultSet rs = null;
		try {
			st = conn.prepareStatement(
					"SELECT usuario.*,relatorio.titulo as relatorioTitulo "
					+ "FROM usuario INNER JOIN relatorio "
					+ "ON usuario.relatorioId = relatorio.id "
					+ "ORDER BY titulo");
			
			rs = st.executeQuery();
			
			List<Usuario> list = new ArrayList<>();
			Map<Integer, Relatorio> map = new HashMap<>();
			
			while (rs.next()) {
				
				Relatorio rel = map.get(rs.getInt("relatorioId"));
				
				if (rel == null) {
					rel = instanciaRelatorio(rs);
					map.put(rs.getInt("DepartmentId"), rel);
				}
				
				Usuario obj = instanciaUsuario(rs, rel);
				list.add(obj);
			}
			return list;
		}
		catch (SQLException e) {
			throw new BdException(e.getMessage());
		}
		finally {
			BD.closeStatement(st);
			BD.closeResultSet(rs);
		}
		
	}
}
